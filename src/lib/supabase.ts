// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

const supabaseUrl = process.env.VITE_SUPABASE_URL || (typeof window !== 'undefined' ? (window as any).ENV?.VITE_SUPABASE_URL : undefined);
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || (typeof window !== 'undefined' ? (window as any).ENV?.VITE_SUPABASE_ANON_KEY : undefined);

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// Create a single instance of the Supabase client
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 5
    }
  },
  global: {
    headers: {
      'x-application-name': 'fuel-sight-guardian'
    }
  }
});

// Export a function to get the client instance
export const getSupabaseClient = () => supabase;

// Helper functions for tank servicing
export const markTankServiced = async (tankId: string, userId: string) => {
  return supabase
    .from('fuel_tanks')
    .update({ 
      serviced_on: new Date().toISOString().slice(0, 10), 
      serviced_by: userId 
    })
    .eq('id', tankId);
};

export const unmarkTankServiced = async (tankId: string) => {
  return supabase
    .from('fuel_tanks')
    .update({ 
      serviced_on: null, 
      serviced_by: null 
    })
    .eq('id', tankId);
};